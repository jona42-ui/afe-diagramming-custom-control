"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.findIcon = findIcon;
exports.getSvgData = getSvgData;
exports.svgShapes = svgShapes;
exports.isPrefixed = isPrefixed;
exports.removePrefix = removePrefix;
Object.defineProperty(exports, "icons", {
  enumerable: true,
  get: function get() {
    return _icsIcons.default;
  }
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _icsIcons = _interopRequireDefault(require("../../../icons/ics-icons.json"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/**
 * Returns a single icon Object
 * @param {string} iconName - "name" property of icon
 * @param {Object} [iconsObj=icons] - JSON Array of Objects
 * @example
 * // Returns a single icon Object
 * this.findIcon('copy-code', icons.json);
 */
function findIcon(name) {
  var iconsObj = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _icsIcons.default;
  var icon = iconsObj.filter(function (obj) {
    return obj.title === name;
  });

  if (icon.length === 0) {
    return false;
  } else if (icon.length > 1) {
    throw new Error('Multiple icons found...');
  } else {
    return icon[0];
  }
}
/**
 * Returns "svgData" Object
 * @param {string} iconName - "name" property of icon
 * @example
 * // Returns svgData Object for given iconName
 * this.getSvgData('copy-code');
 */


function getSvgData(iconName) {
  var name = findIcon(iconName);
  return name ? name.childs : false;
}
/**
 * Returns Elements/Nodes for SVG
 * @param {Object} svgData - JSON Object for an SVG icon
 * @example
 * // Returns SVG elements
 * const svgData = getSvgData('copy-code');
 * svgShapes(svgData);
 */


function svgShapes(svgData) {
  var svgElements = Object.keys(svgData).filter(function (key) {
    return svgData[key];
  }).map(function (svgProp, index) {
    var data = svgData[svgProp];

    if (data.name === 'path') {
      return _react.default.createElement("path", {
        d: data.attrs.d,
        key: index
      });
    }

    return '';
  });
  return svgElements;
}

function isPrefixed(name) {
  return name.split('--')[0] === 'icon';
}

function removePrefix(name) {
  return name.split('--')[1];
}

var Icon = function Icon(_ref) {
  var className = _ref.className,
      description = _ref.description,
      fill = _ref.fill,
      fillRule = _ref.fillRule,
      height = _ref.height,
      name = _ref.name,
      role = _ref.role,
      style = _ref.style,
      width = _ref.width,
      rest = _objectWithoutProperties(_ref, ["className", "description", "fill", "fillRule", "height", "name", "role", "style", "width"]);

  var icon = isPrefixed(name) ? findIcon(removePrefix(name)) : findIcon(name);

  var props = _objectSpread({
    className: className,
    fill: fill,
    fillRule: fillRule || icon.attrs.fillRule,
    height: height || icon.height,
    name: isPrefixed ? removePrefix(name) : name,
    role: role,
    style: style,
    viewBox: icon.attrs.viewBox,
    width: width || icon.width
  }, rest);

  var svgContent = icon ? svgShapes(icon.childs) : '';
  return _react.default.createElement("svg", _extends({}, props, {
    "aria-label": description
  }), _react.default.createElement("title", null, description), svgContent);
};

Icon.propTypes = {
  className: _propTypes.default.string,
  description: _propTypes.default.string.isRequired,
  fill: _propTypes.default.string,
  fillRule: _propTypes.default.string,
  height: _propTypes.default.string,
  name: _propTypes.default.string.isRequired,
  role: _propTypes.default.string,
  style: _propTypes.default.object,
  viewBox: _propTypes.default.string,
  width: _propTypes.default.string
};
Icon.defaultProps = {
  fillRule: 'evenodd',
  role: 'img',
  description: 'Provide a description that will be used as the title',
  height: '24',
  width: '24'
};
var _default = Icon;
exports.default = _default;