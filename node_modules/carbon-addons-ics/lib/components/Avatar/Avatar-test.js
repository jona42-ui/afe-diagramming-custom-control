"use strict";

var _react = _interopRequireDefault(require("react"));

var _Avatar = _interopRequireDefault(require("../Avatar"));

var _enzyme = require("enzyme");

var _testUtils = _interopRequireDefault(require("react-dom/test-utils"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('Avatar', function () {
  describe('Renders common props as expected', function () {
    var wrapper = (0, _enzyme.shallow)(_react.default.createElement(_Avatar.default, {
      size: 'sm',
      className: 'extra-class',
      description: "Here is a description"
    }));
    it('Renders an Avatar', function () {
      expect(wrapper.length).toEqual(1);
    });
    it('Renders with appropriate classname', function () {
      expect(wrapper.hasClass('bx--avatar')).toEqual(true);
    });
    it('Renders with extra class', function () {
      expect(wrapper.hasClass('extra-class')).toEqual(true);
    });
  });
  describe('Renders sizes of container and icons as expected', function () {
    it('Renders extra small', function () {
      var wrapper = (0, _enzyme.mount)(_react.default.createElement(_Avatar.default, {
        size: 'xs',
        description: "Here is a description"
      }));
      var containerStyle = wrapper.find('.bx--avatar').get(0).props.style;
      var iconStyle = wrapper.find('svg').get(0).props;
      expect(containerStyle).toHaveProperty('height', 32);
      expect(containerStyle).toHaveProperty('width', 32);
      expect(iconStyle).toHaveProperty('height', '16');
      expect(iconStyle).toHaveProperty('width', '16');
    });
    it('Renders small', function () {
      var wrapper = (0, _enzyme.mount)(_react.default.createElement(_Avatar.default, {
        size: 'sm',
        description: "Here is a description"
      }));
      var containerStyle = wrapper.find('.bx--avatar').get(0).props.style;
      var iconStyle = wrapper.find('svg').get(0).props;
      expect(containerStyle).toHaveProperty('height', 40);
      expect(containerStyle).toHaveProperty('width', 40);
      expect(iconStyle).toHaveProperty('height', '20');
      expect(iconStyle).toHaveProperty('width', '20');
    });
    it('Renders medium', function () {
      var wrapper = (0, _enzyme.mount)(_react.default.createElement(_Avatar.default, {
        size: 'md',
        description: "Here is a description"
      }));
      var containerStyle = wrapper.find('.bx--avatar').get(0).props.style;
      var iconStyle = wrapper.find('svg').get(0).props;
      expect(containerStyle).toHaveProperty('height', 56);
      expect(containerStyle).toHaveProperty('width', 56);
      expect(iconStyle).toHaveProperty('height', '28');
      expect(iconStyle).toHaveProperty('width', '28');
    });
    it('Renders large', function () {
      var wrapper = (0, _enzyme.mount)(_react.default.createElement(_Avatar.default, {
        size: 'lg',
        description: "Here is a description"
      }));
      var containerStyle = wrapper.find('.bx--avatar').get(0).props.style;
      var iconStyle = wrapper.find('svg').get(0).props;
      expect(containerStyle).toHaveProperty('height', 80);
      expect(containerStyle).toHaveProperty('width', 80);
      expect(iconStyle).toHaveProperty('height', '36');
      expect(iconStyle).toHaveProperty('width', '36');
    });
    it('Renders extra large', function () {
      var wrapper = (0, _enzyme.mount)(_react.default.createElement(_Avatar.default, {
        size: 'xl',
        description: "Here is a description"
      }));
      var containerStyle = wrapper.find('.bx--avatar').get(0).props.style;
      var iconStyle = wrapper.find('svg').get(0).props;
      expect(containerStyle).toHaveProperty('height', 112);
      expect(containerStyle).toHaveProperty('width', 112);
      expect(iconStyle).toHaveProperty('height', '48');
      expect(iconStyle).toHaveProperty('width', '48');
    });
    it('Renders extra extra large', function () {
      var wrapper = (0, _enzyme.mount)(_react.default.createElement(_Avatar.default, {
        size: 'xxl',
        description: "Here is a description"
      }));
      var containerStyle = wrapper.find('.bx--avatar').get(0).props.style;
      var iconStyle = wrapper.find('svg').get(0).props;
      expect(containerStyle).toHaveProperty('height', 176);
      expect(containerStyle).toHaveProperty('width', 176);
      expect(iconStyle).toHaveProperty('height', '72');
      expect(iconStyle).toHaveProperty('width', '72');
    });
  });
  describe('Renders colors, images and icons correctly', function () {
    var wrapper = (0, _enzyme.mount)(_react.default.createElement(_Avatar.default, {
      imgUrl: 'image-url',
      description: "Here is a description"
    }));
    it('OnImageError will call setState', function () {
      var component = _testUtils.default.renderIntoDocument(_react.default.createElement(_Avatar.default, {
        imgUrl: 'image-url',
        description: "Here is a description"
      }));

      jest.spyOn(component, 'setState');
      component.onImgErr();
      expect(component.setState).toHaveBeenCalled();
    });
    it('onImgLoad 1x1 pixel', function () {
      var component = _testUtils.default.renderIntoDocument(_react.default.createElement(_Avatar.default, {
        description: "description"
      }));

      jest.spyOn(component, 'onImgErr');
      component.setState({
        ImgLoaded: false
      });
      component.imageDOM = {
        naturalWidth: 1,
        naturalHeight: 1
      };
      component.onImgLoad();
      expect(component.onImgErr).toHaveBeenCalled();
    });
    it('onImgLoad 100x100 pixel', function () {
      var component = _testUtils.default.renderIntoDocument(_react.default.createElement(_Avatar.default, {
        description: "description"
      }));

      jest.spyOn(component, 'setState');
      component.setState({
        ImgLoaded: false
      });
      component.imageDOM = {
        naturalWidth: 100,
        naturalHeight: 100
      };
      component.onImgLoad();
      expect(component.setState).toHaveBeenCalled();
    });
    it('componentWillReceiveProps wont set the state', function () {
      var component = _testUtils.default.renderIntoDocument(_react.default.createElement(_Avatar.default, {
        description: "description",
        imgUrl: ''
      }));

      jest.spyOn(component, 'setState');
      component.componentWillReceiveProps({
        description: 'description',
        imgUrl: ''
      });
      expect(component.setState).not.toHaveBeenCalled();
    });
    it('componentWillReceiveProps will set the state', function () {
      var component = _testUtils.default.renderIntoDocument(_react.default.createElement(_Avatar.default, {
        description: "description",
        imgUrl: ''
      }));

      jest.spyOn(component, 'setState');
      component.componentWillReceiveProps({
        description: 'description',
        imgUrl: 'something-different'
      });
      expect(component.setState).toHaveBeenCalled();
    });
    it('onError', function () {
      var component = (0, _enzyme.mount)(_react.default.createElement(_Avatar.default, {
        imgUrl: 'the-url',
        description: "Here is a description"
      }));
      jest.spyOn(component.instance(), 'onImgErr');
      var image = component.find('img');
      image.simulate('error');
      expect(component.instance().onImgErr).toHaveBeenCalled();
    });
    it('onLoad', function () {
      var component = (0, _enzyme.mount)(_react.default.createElement(_Avatar.default, {
        imgUrl: 'the-url',
        description: "Here is a description"
      }));
      jest.spyOn(component.instance(), 'onImgLoad');
      var image = component.find('img');
      image.simulate('load');
      expect(component.instance().onImgLoad).toHaveBeenCalled();
    });
    it('Renders icon in white', function () {
      var iconStyle = wrapper.find('svg').get(0).props;
      expect(iconStyle).toHaveProperty('fill', '#ffffff');
    });
    it('Renders container in gray-30', function () {
      var containerStyle = wrapper.find('.bx--avatar').get(0).props.style;
      expect(containerStyle).toHaveProperty('backgroundColor', '#A6A5A6');
    });
  });
});