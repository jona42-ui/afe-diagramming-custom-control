"use strict";

var _react = _interopRequireDefault(require("react"));

var _react2 = require("@storybook/react");

var _addonActions = require("@storybook/addon-actions");

var _addonInfo = require("@storybook/addon-info");

var _index = require("../../index");

var _storybookReadme = require("storybook-readme");

var _README = _interopRequireDefault(require("./README.md"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var notificationProps = {
  toast: {
    onCloseButtonClick: (0, _addonActions.action)('onCloseButtonClick'),
    className: 'some-class',
    title: 'Title:',
    subtitle: 'Here is the subtitle.',
    link: '#',
    linkTitle: 'Undo',
    iconDescription: 'describes the close button',
    style: {
      marginBottom: '.5rem'
    }
  },
  inline: {
    className: 'some-class',
    title: 'Title',
    subtitle: 'This is the subtitle.',
    iconDescription: 'describes the close button'
  }
};
(0, _react2.storiesOf)('Components|Notifications', module).addDecorator((0, _storybookReadme.withReadme)(_README.default)).add('Toast', (0, _addonInfo.withInfo)("\n      \"Toast\" notifications appear at the top of the screen and out of the way of the user.\n    ")(function () {
  return _react.default.createElement("div", null, _react.default.createElement("div", {
    style: {
      maxWidth: '345px'
    }
  }, _react.default.createElement(_index.ToastNotification, _extends({}, notificationProps.toast, {
    kind: "error"
  })), _react.default.createElement(_index.ToastNotification, _extends({}, notificationProps.toast, {
    kind: "info"
  })), _react.default.createElement(_index.ToastNotification, _extends({}, notificationProps.toast, {
    kind: "success"
  }))), _react.default.createElement("div", null, _react.default.createElement(_index.ToastNotification, _extends({}, notificationProps.toast, {
    subtitle: "Here is a two line subtitle. If your toast notification has more info this is what the layout of the notification will look like.",
    kind: "warning"
  }))));
})).add('Inline', (0, _addonInfo.withInfo)("\n      \"Inline\" notifications occur within the context of the action that was taken.\n    ")(function () {
  return _react.default.createElement("div", null, _react.default.createElement(_index.InlineNotification, _extends({}, notificationProps.inline, {
    kind: "error"
  })), _react.default.createElement(_index.InlineNotification, _extends({}, notificationProps.inline, {
    kind: "info"
  })), _react.default.createElement(_index.InlineNotification, _extends({}, notificationProps.inline, {
    kind: "success"
  })), _react.default.createElement(_index.InlineNotification, _extends({}, notificationProps.inline, {
    kind: "warning"
  })));
}));