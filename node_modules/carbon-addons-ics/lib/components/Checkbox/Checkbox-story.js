"use strict";

var _react = _interopRequireDefault(require("react"));

var _react2 = require("@storybook/react");

var _addonActions = require("@storybook/addon-actions");

var _carbonComponentsReact = require("carbon-components-react");

var _addonInfo = require("@storybook/addon-info");

var _storybookReadme = require("storybook-readme");

var _README = _interopRequireDefault(require("./README.md"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var checkboxEvents = {
  className: 'some-class',
  onChange: (0, _addonActions.action)('onChange')
};
(0, _react2.storiesOf)('Components|Checkbox', module).addDecorator((0, _storybookReadme.withReadme)(_README.default)).add('enabled checked', (0, _addonInfo.withInfo)("\n      The example below shows how the Checkbox component can be used as an uncontrolled component that is initially checked\n      by setting the defaultChecked property to true. To use the component in a controlled way, you should set the\n      checked property instead.\n    ")(function () {
  return _react.default.createElement("fieldset", {
    className: "bx--fieldset"
  }, _react.default.createElement("legend", {
    className: "bx--label"
  }, "Favorite Colors"), _react.default.createElement(_carbonComponentsReact.Checkbox, _extends({
    defaultChecked: true
  }, checkboxEvents, {
    id: "red",
    labelText: "Red"
  })), _react.default.createElement(_carbonComponentsReact.Checkbox, _extends({
    defaultChecked: true
  }, checkboxEvents, {
    id: "blue",
    labelText: "Blue"
  })));
})).add('enabled unchecked', (0, _addonInfo.withInfo)("\n      The example below shows how the Checkbox component can be used as an uncontrolled component that is initially\n      unchecked. To use the component in a controlled way, you should set the checked property instead.\n    ")(function () {
  return _react.default.createElement("fieldset", {
    className: "bx--fieldset"
  }, _react.default.createElement("legend", {
    className: "bx--label"
  }, "Favorite Colors"), _react.default.createElement(_carbonComponentsReact.Checkbox, _extends({}, checkboxEvents, {
    id: "red",
    labelText: "Red"
  })), _react.default.createElement(_carbonComponentsReact.Checkbox, _extends({}, checkboxEvents, {
    id: "blue",
    labelText: "Blue"
  })));
})).add('disabled', (0, _addonInfo.withInfo)("\n      The example below shows a disabled Checkbox component.\n    ")(function () {
  return _react.default.createElement("fieldset", {
    disabled: true,
    className: "bx--fieldset"
  }, _react.default.createElement("legend", {
    className: "bx--label"
  }, "Favorite Colors"), _react.default.createElement(_carbonComponentsReact.Checkbox, _extends({}, checkboxEvents, {
    id: "red",
    labelText: "Red"
  })), _react.default.createElement(_carbonComponentsReact.Checkbox, _extends({}, checkboxEvents, {
    id: "blue",
    labelText: "Blue"
  })));
}));