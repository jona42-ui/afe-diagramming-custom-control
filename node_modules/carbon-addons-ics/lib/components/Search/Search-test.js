"use strict";

var _react = _interopRequireDefault(require("react"));

var _Icon = _interopRequireDefault(require("../Icon"));

var _Search = _interopRequireDefault(require("./Search"));

var _enzyme = require("enzyme");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('Search', function () {
  describe('renders as expected', function () {
    var wrapper = (0, _enzyme.mount)(_react.default.createElement(_Search.default, {
      id: "test",
      className: "extra-class",
      labelText: "testlabel"
    }));
    var label = wrapper.find('label');
    var textInput = wrapper.find('input');
    var container = wrapper.find('[role="search"]');
    describe('container', function () {
      it('should add extra classes that are passed via className', function () {
        expect(container.hasClass('extra-class')).toEqual(true);
      });
      it('should have the role of search', function () {
        expect(container.props().role).toEqual('search');
      });
    });
    describe('icon', function () {
      it('renders correct search icon', function () {
        var icons = container.find(_Icon.default);
        expect(icons.at(0).props().name).toEqual('search');
      });
      it('renders one Icon', function () {
        var icons = container.find(_Icon.default);
        expect(icons.length).toEqual(2);
      });
    });
    describe('input', function () {
      it('renders as expected', function () {
        expect(textInput.length).toBe(1);
      });
      it('has the expected classes', function () {
        expect(textInput.hasClass('bx--search-input')).toEqual(true);
      });
      it('should set type as expected', function () {
        expect(textInput.props().type).toEqual('text');
        wrapper.setProps({
          type: 'email'
        });
        expect(wrapper.find('input').props().type).toEqual('email');
      });
      it('should set value as expected', function () {
        expect(textInput.props().defaultValue).toEqual(undefined);
        wrapper.setProps({
          defaultValue: 'test'
        });
        expect(wrapper.find('input').props().defaultValue).toEqual('test');
        expect(wrapper.find('input').props().value).toEqual(undefined);
      });
      it('should set placeholder as expected', function () {
        expect(textInput.props().placeholder).toEqual('');
        wrapper.setProps({
          placeHolderText: 'Enter text'
        });
        expect(wrapper.find('input').props().placeholder).toEqual('Enter text');
      });
    });
    describe('label', function () {
      it('renders a label', function () {
        expect(label.length).toBe(1);
      });
      it('has the expected classes', function () {
        expect(label.hasClass('bx--label')).toEqual(true);
      });
      it('should set label as expected', function () {
        expect(wrapper.props().labelText).toEqual('testlabel');
        wrapper.setProps({
          labelText: 'Email Input'
        });
        expect(wrapper.props().labelText).toEqual('Email Input');
      });
    });
  });
  describe('close events', function () {
    var onClick = jest.fn();
    var onChange = jest.fn();
    var wrapper = (0, _enzyme.mount)(_react.default.createElement(_Search.default, {
      id: "test",
      labelText: "testlabel",
      onClick: onClick,
      onChange: onChange
    }));
    var input = wrapper.find('input');
    var closeIcon = wrapper.find(_Icon.default).at(1);
    it('should clear input when close icon clicked', function () {
      wrapper.setState({
        hasContent: true
      });
      closeIcon.simulate('click', input);
      expect(onChange).toBeCalled();
    });
    it('should clear input when close icon clicked with value props', function () {
      wrapper.setProps({
        value: 'some value'
      });
      wrapper.setState({
        hasContent: true
      });
      closeIcon.simulate('click', input);
      expect(onChange).toBeCalled();
    });
  });
  describe('input events', function () {
    describe('enabled textinput', function () {
      var onClick = jest.fn();
      var onChange = jest.fn();
      var wrapper = (0, _enzyme.shallow)(_react.default.createElement(_Search.default, {
        id: "test",
        labelText: "testlabel",
        onClick: onClick,
        onChange: onChange
      }));
      var input = wrapper.find('input');
      var eventObject = {
        target: {
          defaultValue: 'test'
        }
      };
      it('should invoke onClick when input is clicked', function () {
        input.simulate('click');
        expect(onClick).toBeCalled();
      });
      it('should invoke onChange when input value is changed', function () {
        input.simulate('change', eventObject);
        expect(onChange).toBeCalledWith(eventObject);
      });
    });
  });
});