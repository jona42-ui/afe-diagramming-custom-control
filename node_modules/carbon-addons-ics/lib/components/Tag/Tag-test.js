"use strict";

var _react = _interopRequireDefault(require("react"));

var _Tag = _interopRequireDefault(require("./Tag"));

var _ActionIcon = _interopRequireDefault(require("../ActionIcon"));

var _enzyme = require("enzyme");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('Tag', function () {
  describe('Renders as expected', function () {
    it('should render with the default dark style', function () {
      var wrapper = (0, _enzyme.shallow)(_react.default.createElement(_Tag.default, null));
      var tag = wrapper.find('span');
      expect(tag.hasClass('bx--tag')).toEqual(true);
      expect(tag.hasClass('bx--tag--dark')).toEqual(true);
    });
  });
  describe('Renders action icon as expected', function () {
    it('should render with the add icon', function () {
      var wrapper = (0, _enzyme.shallow)(_react.default.createElement(_Tag.default, {
        action: "add"
      }));
      var icon = wrapper.find('.bx--tag__left');
      expect(icon.hasClass('bx--tag__left--add')).toEqual(true);
    });
    it('should render with the remove icon', function () {
      var wrapper = (0, _enzyme.shallow)(_react.default.createElement(_Tag.default, {
        action: "remove"
      }));
      var icon = wrapper.find('.bx--tag__left');
      expect(icon.hasClass('bx--tag__left--remove')).toEqual(true);
    });
    it('should render with the success icon', function () {
      var wrapper = (0, _enzyme.shallow)(_react.default.createElement(_Tag.default, {
        action: "success"
      }));
      var icon = wrapper.find('.bx--tag__left');
      expect(icon.hasClass('bx--tag__left--success')).toEqual(true);
    });
  });
  it('should support light style', function () {
    var wrapper = (0, _enzyme.shallow)(_react.default.createElement(_Tag.default, {
      style: "light"
    }));
    var tag = wrapper.find('span');
    expect(tag.hasClass('bx--tag--light')).toEqual(true);
  });
  it('should support remove style', function () {
    var wrapper = (0, _enzyme.shallow)(_react.default.createElement(_Tag.default, {
      remove: true
    }));
    var tag = wrapper.find('span');
    expect(tag.hasClass('bx--tag--remove')).toEqual(true);
    expect(tag.find('.bx--tag__remove-icon').length).toEqual(1);
  });
  it('should support extra class names', function () {
    var wrapper = (0, _enzyme.shallow)(_react.default.createElement(_Tag.default, {
      className: "extra-class"
    }, "Dublin"));
    var tag = wrapper.find('span');
    expect(tag.hasClass('extra-class')).toEqual(true);
  });
  describe('Check that functions passed in as props are called', function () {
    var onClick = jest.fn();
    var wrapper = (0, _enzyme.shallow)(_react.default.createElement(_Tag.default, {
      action: 'add',
      onClick: onClick
    }));
    var icon = wrapper.find(_ActionIcon.default);
    it('should call onClick', function () {
      icon.simulate('click');
      expect(onClick).toBeCalled();
    });
    var remove = (0, _enzyme.shallow)(_react.default.createElement(_Tag.default, {
      action: 'remove'
    }));
    var removeIcon = remove.find(_ActionIcon.default);
    it('should call default remove if onClick not set for remove', function () {
      removeIcon.simulate('click');
      expect(remove.state().showTag).toEqual(false);
    });
  });
});