"use strict";

var _react = _interopRequireDefault(require("react"));

var _react2 = require("@storybook/react");

var _addonActions = require("@storybook/addon-actions");

var _addonInfo = require("@storybook/addon-info");

var _classnames = _interopRequireDefault(require("classnames"));

var _carbonComponentsReact = require("carbon-components-react");

var _index = require("../../index");

var _storybookReadme = require("storybook-readme");

var _README = _interopRequireDefault(require("./README.md"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var additionalProps = {
  className: 'some-class'
};
var checkboxEvents = {
  className: 'some-class',
  labelText: 'Checkbox'
};
var fieldsetCheckboxProps = {
  className: 'some-class',
  legendText: 'Checkbox'
};
var fileUploaderEvents = {
  className: 'some-class'
};
var fieldsetFileUploaderProps = {
  className: 'some-class',
  legendText: 'File Uploader'
};
var radioProps = {
  className: 'some-class'
};
var fieldsetRadioProps = {
  className: 'some-class',
  legendText: 'Radio Button'
};
var searchProps = {
  className: 'some-class'
};
var fieldsetSearchProps = {
  className: 'some-class',
  legendText: 'Search'
};
var selectProps = {
  className: 'some-class',
  labelText: 'Select Label'
};
var fieldsetSelectProps = {
  className: 'some-class',
  legendText: 'Select'
};
var textInputClasses = (0, _classnames.default)({
  'bx--form-item': true,
  'some-class': true
});
var TextInputProps = {
  className: textInputClasses,
  id: 'test1',
  labelText: 'Text Input'
};
var fieldsetTextInputProps = {
  className: textInputClasses,
  legendText: 'Text Input'
};
var PasswordProps = {
  className: textInputClasses,
  id: 'test2',
  labelText: 'Password'
};
var InvalidPasswordProps = {
  className: textInputClasses,
  id: 'test3',
  labelText: 'Password (invalid)',
  invalid: true,
  invalidText: 'Your password must be at least 6 characters as well as contain at least one uppercase, one lowercase, and one number.'
};
var textareaProps = {
  labelText: 'This is a Label',
  className: 'some-class',
  placeholder: 'Hint text here',
  id: 'test4',
  cols: 50,
  rows: 4
};
var fieldsetTextareaProps = {
  className: 'some-class',
  legendText: 'Text Area'
};
var buttonEvents = {
  className: 'some-class'
};
(0, _react2.storiesOf)('Components|Form', module).addDecorator((0, _storybookReadme.withReadme)(_README.default)).addDecorator(function (story) {
  return _react.default.createElement("div", {
    className: "bx--col-xs-8"
  }, story());
}).add('default', (0, _addonInfo.withInfo)("")(function () {
  return _react.default.createElement(_carbonComponentsReact.Form, additionalProps, _react.default.createElement(_carbonComponentsReact.FormGroup, fieldsetCheckboxProps, _react.default.createElement(_carbonComponentsReact.Checkbox, _extends({
    defaultChecked: true
  }, checkboxEvents, {
    id: "checkbox-0"
  })), _react.default.createElement(_carbonComponentsReact.Checkbox, _extends({}, checkboxEvents, {
    id: "checkbox-1"
  })), _react.default.createElement(_carbonComponentsReact.Checkbox, _extends({
    disabled: true
  }, checkboxEvents, {
    id: "checkbox-2"
  }))), _react.default.createElement(_carbonComponentsReact.FormGroup, fieldsetFileUploaderProps, _react.default.createElement(_carbonComponentsReact.FileUploaderButton, _extends({}, fileUploaderEvents, {
    id: "file-1",
    labelText: "Choose Files..."
  }))), _react.default.createElement(_carbonComponentsReact.FormGroup, fieldsetRadioProps, _react.default.createElement(_carbonComponentsReact.RadioButtonGroup, {
    onChange: (0, _addonActions.action)('onChange'),
    name: "radio-button-group",
    defaultSelected: "default-selected"
  }, _react.default.createElement(_carbonComponentsReact.RadioButton, _extends({
    value: "standard",
    id: "radio-1",
    labelText: "Standard Radio Button"
  }, radioProps)), _react.default.createElement(_carbonComponentsReact.RadioButton, _extends({
    value: "default-selected",
    labelText: "Default Selected Radio Button",
    id: "radio-2"
  }, radioProps)), _react.default.createElement(_carbonComponentsReact.RadioButton, _extends({
    value: "disabled",
    labelText: "Disabled Radio Button",
    id: "radio-3",
    disabled: true
  }, radioProps)))), _react.default.createElement(_carbonComponentsReact.FormGroup, fieldsetSearchProps, _react.default.createElement(_index.Search, _extends({}, searchProps, {
    id: "search-1",
    labelText: "Search",
    placeHolderText: "Search Bluemix Offerings"
  }))), _react.default.createElement(_carbonComponentsReact.FormGroup, fieldsetSelectProps, _react.default.createElement(_index.Select, _extends({}, selectProps, {
    id: "select-1",
    defaultValue: "placeholder-item"
  }), _react.default.createElement(_carbonComponentsReact.SelectItem, {
    disabled: true,
    hidden: true,
    value: "placeholder-item",
    text: "Pick an option"
  }), _react.default.createElement(_carbonComponentsReact.SelectItem, {
    value: "option-1",
    text: "Option 1"
  }), _react.default.createElement(_carbonComponentsReact.SelectItem, {
    value: "option-2",
    text: "Option 2"
  }), _react.default.createElement(_carbonComponentsReact.SelectItem, {
    value: "option-3",
    text: "Option 3"
  }))), _react.default.createElement(_carbonComponentsReact.FormGroup, fieldsetTextInputProps, _react.default.createElement(_index.TextInput, TextInputProps), _react.default.createElement(_index.TextInput, _extends({
    type: "password",
    required: true,
    pattern: "(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{6,}"
  }, PasswordProps)), _react.default.createElement(_index.TextInput, _extends({
    type: "password",
    required: true,
    pattern: "(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{6,}"
  }, InvalidPasswordProps))), _react.default.createElement(_carbonComponentsReact.FormGroup, fieldsetTextareaProps, _react.default.createElement(_index.TextArea, textareaProps)), _react.default.createElement("div", null, _react.default.createElement(_carbonComponentsReact.Button, _extends({
    type: "submit",
    className: "some-class"
  }, buttonEvents), "Submit")));
}));