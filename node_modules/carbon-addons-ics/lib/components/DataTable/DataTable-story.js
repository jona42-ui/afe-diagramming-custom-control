"use strict";

var _react = _interopRequireDefault(require("react"));

var _react2 = require("@storybook/react");

var _addonInfo = require("@storybook/addon-info");

var _carbonComponentsReact = require("carbon-components-react");

var _index = require("../../index");

var _storybookReadme = require("storybook-readme");

var _README = _interopRequireDefault(require("./README.md"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Table = _carbonComponentsReact.DataTable.Table,
    TableContainer = _carbonComponentsReact.DataTable.TableContainer,
    TableHead = _carbonComponentsReact.DataTable.TableHead,
    TableBody = _carbonComponentsReact.DataTable.TableBody,
    TableCell = _carbonComponentsReact.DataTable.TableCell,
    TableRow = _carbonComponentsReact.DataTable.TableRow,
    TableSelectAll = _carbonComponentsReact.DataTable.TableSelectAll,
    TableSelectRow = _carbonComponentsReact.DataTable.TableSelectRow;
var initialRows = [{
  id: 'a',
  name: 'Load Balancer 3',
  protocol: 'HTTP',
  port: 3000,
  rule: 'Round robin',
  attached_groups: 'Kevins VM Groups',
  status: 'Disabled'
}, {
  id: 'b',
  name: 'Load Balancer 1',
  protocol: 'HTTP',
  port: 443,
  rule: 'Round robin',
  attached_groups: 'Maureens VM Groups',
  status: 'Starting'
}, {
  id: 'c',
  name: 'Load Balancer 2',
  protocol: 'HTTP',
  port: 80,
  rule: 'DNS delegation',
  attached_groups: 'Andrews VM Groups',
  status: 'Active'
}];
var headers = [{
  key: 'name',
  header: 'Name'
}, {
  key: 'protocol',
  header: 'Protocol'
}, {
  key: 'port',
  header: 'Port'
}, {
  key: 'rule',
  header: 'Rule'
}, {
  key: 'attached_groups',
  header: 'Attached Groups'
}, {
  key: 'status',
  header: 'Status'
}];
(0, _react2.storiesOf)('Components|DataTable', module).addDecorator((0, _storybookReadme.withReadme)(_README.default)).addDecorator(function (story) {
  return _react.default.createElement("div", {
    className: "bx--col-xs-12"
  }, story());
}).add('default', (0, _addonInfo.withInfo)("")(function () {
  return _react.default.createElement(_carbonComponentsReact.DataTable, {
    rows: initialRows,
    headers: headers,
    render: function render(_ref) {
      var rows = _ref.rows,
          headers = _ref.headers,
          getHeaderProps = _ref.getHeaderProps,
          getSelectionProps = _ref.getSelectionProps;
      return _react.default.createElement(TableContainer, null, _react.default.createElement(Table, null, _react.default.createElement(TableHead, null, _react.default.createElement(TableRow, null, _react.default.createElement(TableSelectAll, getSelectionProps()), headers.map(function (header) {
        return _react.default.createElement(_index.TableHeader, getHeaderProps({
          header: header
        }), header.header);
      }))), _react.default.createElement(TableBody, null, rows.map(function (row) {
        return _react.default.createElement(TableRow, {
          key: row.id
        }, _react.default.createElement(TableSelectRow, getSelectionProps({
          row: row
        })), row.cells.map(function (cell) {
          return _react.default.createElement(TableCell, {
            key: cell.id
          }, cell.value);
        }));
      }))));
    }
  });
})).add('with sorting', (0, _addonInfo.withInfo)("DataTable with sorting")(function () {
  return _react.default.createElement(_carbonComponentsReact.DataTable, {
    rows: initialRows,
    headers: headers,
    render: function render(_ref2) {
      var rows = _ref2.rows,
          headers = _ref2.headers,
          getHeaderProps = _ref2.getHeaderProps;
      return _react.default.createElement(TableContainer, null, _react.default.createElement(Table, null, _react.default.createElement(TableHead, null, _react.default.createElement(TableRow, null, headers.map(function (header) {
        return _react.default.createElement(_index.TableHeader, getHeaderProps({
          header: header
        }), header.header);
      }))), _react.default.createElement(TableBody, null, rows.map(function (row) {
        return _react.default.createElement(TableRow, {
          key: row.id
        }, row.cells.map(function (cell) {
          return _react.default.createElement(TableCell, {
            key: cell.id
          }, cell.value);
        }));
      }))));
    }
  });
})).add('with selection', (0, _addonInfo.withInfo)("DataTable with selection")(function () {
  return _react.default.createElement(_carbonComponentsReact.DataTable, {
    rows: initialRows,
    headers: headers,
    render: function render(_ref3) {
      var rows = _ref3.rows,
          headers = _ref3.headers,
          getHeaderProps = _ref3.getHeaderProps,
          getSelectionProps = _ref3.getSelectionProps;
      return _react.default.createElement(TableContainer, null, _react.default.createElement(Table, null, _react.default.createElement(TableHead, null, _react.default.createElement(TableRow, null, _react.default.createElement(TableSelectAll, getSelectionProps()), headers.map(function (header) {
        return _react.default.createElement(_index.TableHeader, getHeaderProps({
          header: header
        }), header.header);
      }))), _react.default.createElement(TableBody, null, rows.map(function (row) {
        return _react.default.createElement(TableRow, {
          key: row.id
        }, _react.default.createElement(TableSelectRow, getSelectionProps({
          row: row
        })), row.cells.map(function (cell) {
          return _react.default.createElement(TableCell, {
            key: cell.id
          }, cell.value);
        }));
      }))));
    }
  });
})).add('with overflow', (0, _addonInfo.withInfo)("")(function () {
  return _react.default.createElement(_carbonComponentsReact.DataTable, {
    rows: initialRows,
    headers: headers,
    render: function render(_ref4) {
      var rows = _ref4.rows,
          headers = _ref4.headers,
          getHeaderProps = _ref4.getHeaderProps,
          getSelectionProps = _ref4.getSelectionProps;
      return _react.default.createElement(TableContainer, null, _react.default.createElement(Table, null, _react.default.createElement(TableHead, null, _react.default.createElement(TableRow, null, _react.default.createElement(TableSelectAll, getSelectionProps()), headers.map(function (header) {
        return _react.default.createElement(_index.TableHeader, getHeaderProps({
          header: header
        }), header.header);
      }), _react.default.createElement("th", null))), _react.default.createElement(TableBody, null, rows.map(function (row) {
        return _react.default.createElement(TableRow, {
          key: row.id
        }, _react.default.createElement(TableSelectRow, getSelectionProps({
          row: row
        })), row.cells.map(function (cell) {
          return _react.default.createElement(TableCell, {
            key: cell.id
          }, cell.value);
        }), _react.default.createElement(TableCell, null, _react.default.createElement(_index.OverflowMenu, {
          flipped: true,
          floatingMenu: true
        }, _react.default.createElement(_carbonComponentsReact.OverflowMenuItem, {
          itemText: "Option 1"
        }), _react.default.createElement(_carbonComponentsReact.OverflowMenuItem, {
          itemText: "Option 2"
        }), _react.default.createElement(_carbonComponentsReact.OverflowMenuItem, {
          itemText: "Option 3"
        }), _react.default.createElement(_carbonComponentsReact.OverflowMenuItem, {
          itemText: "Option 4"
        }), _react.default.createElement(_carbonComponentsReact.OverflowMenuItem, {
          itemText: "Danger option",
          hasDivider: true,
          isDelete: true
        }))));
      }))));
    }
  });
}));