"use strict";

var _react = _interopRequireDefault(require("react"));

var _react2 = require("@storybook/react");

var _addonActions = require("@storybook/addon-actions");

var _addonInfo = require("@storybook/addon-info");

var _carbonComponentsReact = require("carbon-components-react");

var _storybookReadme = require("storybook-readme");

var _README = _interopRequireDefault(require("./README.md"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var radioProps = {
  className: 'some-class'
};
(0, _react2.storiesOf)('Components|RadioButton', module).addDecorator((0, _storybookReadme.withReadme)(_README.default)).add('enabled', (0, _addonInfo.withInfo)("\n       This shows how the Radio Button component can be used as an uncontrolled component that is initially checked by setting the defaultChecked property to true. To use the component in a controlled way, set the checked property instead.\n      ")(function () {
  return _react.default.createElement(_carbonComponentsReact.RadioButton, _extends({
    name: "test",
    onChange: (0, _addonActions.action)('onChange'),
    value: "standard",
    labelText: "Standard Radio Button",
    id: "radio-1"
  }, radioProps));
})).add('disabled', (0, _addonInfo.withInfo)("\n      This example shows a disabled Radio Button component.\n    ")(function () {
  return _react.default.createElement(_carbonComponentsReact.RadioButton, _extends({
    name: "test-2",
    value: "disabled",
    labelText: "Disabled Radio Button",
    id: "radio-2",
    disabled: true
  }, radioProps));
}));