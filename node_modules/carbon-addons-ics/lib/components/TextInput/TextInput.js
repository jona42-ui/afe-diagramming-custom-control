"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _Icon = _interopRequireDefault(require("../Icon"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var TextInput =
/*#__PURE__*/
function (_Component) {
  _inherits(TextInput, _Component);

  function TextInput(props) {
    var _this;

    _classCallCheck(this, TextInput);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(TextInput).call(this, props));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "_onChange", function (evt) {
      if (!_this.props.disabled) {
        _this.props.onChange(evt);
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "_onClick", function (evt) {
      if (!_this.props.disabled) {
        _this.props.onClick(evt);
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "_onKeyUp", function (evt) {
      if (!_this.props.disabled) {
        _this.setState({
          labelMotion: Boolean(evt.target.value)
        });
      }
    });

    _this.state = {
      labelMotion: !!props.defaultValue || !!props.value || props.defaultValue === 0
    };
    _this.inputRef = null;
    _this.onClear = _this.onClear.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    return _this;
  }

  _createClass(TextInput, [{
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      var value = nextProps.value;

      if (value !== this.props.value) {
        this.setState({
          labelMotion: Boolean(value)
        });
      }
    }
  }, {
    key: "onClear",
    value: function onClear() {
      var _this$props = this.props,
          disabled = _this$props.disabled,
          onClear = _this$props.onClear;

      if (!disabled) {
        this.inputRef.value = '';
        this.setState({
          labelMotion: false
        });
        onClear();
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _classNames,
          _this2 = this;

      var _this$props2 = this.props,
          labelText = _this$props2.labelText,
          id = _this$props2.id,
          type = _this$props2.type,
          hideLabel = _this$props2.hideLabel,
          invalid = _this$props2.invalid,
          invalidText = _this$props2.invalidText,
          clearable = _this$props2.clearable,
          clearDescription = _this$props2.clearDescription,
          rest = _objectWithoutProperties(_this$props2, ["labelText", "id", "type", "hideLabel", "invalid", "invalidText", "clearable", "clearDescription"]);

      var labelMotion = this.state.labelMotion;
      var textInputClasses = (0, _classnames.default)((_classNames = {
        'bx--text-input': true
      }, _defineProperty(_classNames, this.props.className, this.props.className), _defineProperty(_classNames, 'bx--text-input--value', labelMotion), _defineProperty(_classNames, 'bx--text-input--clearable', clearable), _classNames));
      var labelClasses = (0, _classnames.default)({
        'bx--label': true,
        'bx--label-motion': labelMotion,
        'bx--visually-hidden': hideLabel
      });
      var label = labelText ? _react.default.createElement("label", {
        htmlFor: id,
        className: labelClasses
      }, labelText) : null;
      var error = invalid ? _react.default.createElement("div", {
        className: "bx--form-requirement"
      }, invalidText) : null;
      var input = invalid ? _react.default.createElement("input", _extends({}, rest, {
        type: type,
        id: id,
        className: textInputClasses,
        onKeyUp: this._onKeyUp.bind(this),
        onClick: this._onClick.bind(this),
        onChange: this._onChange.bind(this),
        "data-invalid": true,
        placeholder: null,
        ref: function ref(el) {
          return _this2.inputRef = el;
        }
      })) : _react.default.createElement("input", _extends({}, rest, {
        id: id,
        type: type,
        className: textInputClasses,
        onKeyUp: this._onKeyUp.bind(this),
        onClick: this._onClick.bind(this),
        onChange: this._onChange.bind(this),
        placeholder: null,
        ref: function ref(el) {
          return _this2.inputRef = el;
        }
      }));

      var span = _react.default.createElement("span", {
        className: "bx--mi__underline"
      });

      var clear = clearable ? _react.default.createElement(_Icon.default, {
        name: "close",
        className: "bx--text-input__clear",
        description: clearDescription,
        onClick: this.onClear,
        style: {
          opacity: labelMotion ? 1 : 0
        }
      }) : null;
      return _react.default.createElement("div", {
        className: "bx--text-input__wrapper"
      }, input, clear, span, label, error);
    }
  }]);

  return TextInput;
}(_react.Component);

exports.default = TextInput;

_defineProperty(TextInput, "propTypes", {
  className: _propTypes.default.string,
  disabled: _propTypes.default.bool,
  id: _propTypes.default.string.isRequired,
  labelText: _propTypes.default.string,
  onChange: _propTypes.default.func,
  onClick: _propTypes.default.func,
  onKeyUp: _propTypes.default.func,
  type: _propTypes.default.string,
  hideLabel: _propTypes.default.bool,
  invalid: _propTypes.default.bool,
  invalidText: _propTypes.default.string,
  clearable: _propTypes.default.bool,
  clearDescription: _propTypes.default.string,
  onClear: _propTypes.default.func
});

_defineProperty(TextInput, "defaultProps", {
  className: 'bx--text__input',
  disabled: false,
  type: 'text',
  onChange: function onChange() {},
  onClick: function onClick() {},
  onKeyUp: function onKeyUp() {},
  invalid: false,
  labelText: '',
  invalidText: 'Provide invalidText',
  clearable: false,
  clearDescription: 'Provide clearDescription',
  onClear: function onClear() {}
});