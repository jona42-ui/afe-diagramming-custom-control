"use strict";

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _Pagination = _interopRequireDefault(require("../Pagination"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('Pagination', function () {
  describe('Renders common props as expected', function () {
    var wrapper = (0, _enzyme.mount)(_react.default.createElement(_Pagination.default, {
      totalItems: 10,
      className: "extra-class",
      backwardText: "prev",
      forwardText: "next"
    }));
    it('Renders the component as expected', function () {
      expect(wrapper.length).toEqual(1);
    });
    it('Renders the expected className', function () {
      expect(wrapper.children().hasClass('bx--pagination')).toEqual(true);
    });
    it('Renders an extra className', function () {
      expect(wrapper.hasClass('extra-class')).toEqual(true);
    });
    it('Renders the expected increment text', function () {
      expect(wrapper.find('.bx--pagination__right .bx--btn').text()).toEqual('next');
    });
    it('Renders the expected decrement text', function () {
      expect(wrapper.find('.bx--pagination__left .bx--btn').text()).toEqual('prev');
    });
    it('Renders the expected amount of tabs', function () {
      expect(wrapper.find('.bx--tabs__nav-item').length).toBe(10);
    });
    it('Renders the expected start page', function () {
      expect(wrapper.props().page).toBe(1);
    });
  });
  describe('Changes between page values as expected', function () {
    var wrapper = (0, _enzyme.mount)(_react.default.createElement(_Pagination.default, {
      totalItems: 10,
      page: 2
    }));
    it('Increases the page value on increment', function () {
      expect(wrapper.state().page).toBe(2);
      wrapper.find('.bx--pagination__right .bx--btn').simulate('click');
      expect(wrapper.state().page).toBe(3);
    });
    it('Decreases the page value on decrement', function () {
      expect(wrapper.state().page).toBe(3);
      wrapper.find('.bx--pagination__left .bx--btn').simulate('click');
      expect(wrapper.state().page).toBe(2);
    });
    it('Selects the page value on enter', function () {
      var firstTab = wrapper.find('.bx--tabs__nav-item').first().simulate('focus');
      firstTab.simulate('keyDown', {
        key: 'Enter',
        keyCode: 13,
        which: 13
      });
      expect(wrapper.state().page).toBe(1);
    });
    it('Increases the page value on right arrow', function () {
      var firstTab = wrapper.find('.bx--tabs__nav-item').first().simulate('focus');
      firstTab.simulate('keyDown', {
        key: 'ArrowRight',
        keyCode: 39,
        which: 39
      });
      expect(wrapper.state().page).toBe(2);
    });
    it('Decreases the page value on left arrow', function () {
      var firstTab = wrapper.find('.bx--tabs__nav-item').first().simulate('focus');
      firstTab.simulate('keyDown', {
        key: 'ArrowLeft',
        keyCode: 37,
        which: 37
      });
      expect(wrapper.state().page).toBe(10);
    });
    it('Selects the page value on click', function () {
      wrapper.find('.bx--tabs__nav-item').first().simulate('click');
      expect(wrapper.state().page).toBe(1);
    });
    it('Returns to start value if incremented past last', function () {
      wrapper.instance().handleTabAnchorFocus(11);
      expect(wrapper.state().page).toBe(1);
    });
    it('Renders the decrement button as disabled if on first page', function () {
      wrapper.find('.bx--tabs__nav-item').first().simulate('click');
      expect(wrapper.find('.bx--pagination__left .bx--btn').props().disabled).toEqual(true);
    });
    it('Renders to increment button as disabled if on last page', function () {
      wrapper.find('.bx--tabs__nav-item').last().simulate('click');
      expect(wrapper.find('.bx--pagination__right .bx--btn').props().disabled).toEqual(true);
    });
    it('Displays hint if tab is focused', function () {
      wrapper.find('.bx--tabs__nav-item').first().simulate('blur');
      expect(wrapper.state().hint).toEqual(false);
      wrapper.find('.bx--tabs__nav-item').first().simulate('focus');
      expect(wrapper.state().hint).toEqual(true);
    });
  });
});