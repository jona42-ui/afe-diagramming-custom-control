"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _index = require("../../index");

var _carbonComponentsReact = require("carbon-components-react");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var FileUploader =
/*#__PURE__*/
function (_Component) {
  _inherits(FileUploader, _Component);

  function FileUploader() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, FileUploader);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(FileUploader)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "state", {
      filenames: [],
      filenameStatus: ''
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "nodes", []);

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleChange", function (evt) {
      _this.setState({
        filenames: _toConsumableArray(evt.target.files).map(function (file) {
          return file.name;
        })
      });

      _this.props.onChange(evt);
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleClick", function (evt, index) {
      var filteredArray = _this.state.filenames.filter(function (filename) {
        return filename !== _this.nodes[index].innerText.trim();
      });

      _this.setState({
        filenames: filteredArray
      });

      _this.props.onClick(evt);
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "clearFiles", function () {
      // A clearFiles function that resets filenames and can be referenced using a ref by the parent.
      _this.setState({
        filenames: [],
        filenameStatus: ''
      });
    });

    return _this;
  }

  _createClass(FileUploader, [{
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      if (nextProps.filenameStatus !== this.props.filenameStatus) {
        this.setState({
          filenameStatus: nextProps.filenameStatus
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          iconDescription = _this$props.iconDescription,
          buttonLabel = _this$props.buttonLabel,
          buttonKind = _this$props.buttonKind,
          filenameStatus = _this$props.filenameStatus,
          labelDescription = _this$props.labelDescription,
          labelTitle = _this$props.labelTitle,
          className = _this$props.className,
          multiple = _this$props.multiple,
          accept = _this$props.accept,
          labelTooltip = _this$props.labelTooltip,
          rest = _objectWithoutProperties(_this$props, ["iconDescription", "buttonLabel", "buttonKind", "filenameStatus", "labelDescription", "labelTitle", "className", "multiple", "accept", "labelTooltip"]);

      var classes = (0, _classnames.default)(_defineProperty({
        'bx--form-item': true
      }, className, className));
      return _react.default.createElement("div", _extends({
        className: classes
      }, rest), _react.default.createElement("strong", {
        className: "bx--label"
      }, labelTitle), _react.default.createElement("div", {
        className: "bx--label-detail"
      }, _react.default.createElement("p", {
        className: "bx--label-description"
      }, labelDescription), labelTooltip && _react.default.createElement(_index.Tooltip, {
        triggerText: null,
        direction: labelTooltip.direction || 'bottom',
        iconName: labelTooltip.iconName,
        className: "bx--label-tooltip",
        menuOffset: labelTooltip.menuOffset
      }, _react.default.createElement("p", null, labelTooltip.text))), _react.default.createElement(_carbonComponentsReact.FileUploaderButton, {
        labelText: buttonLabel,
        multiple: multiple,
        buttonKind: buttonKind,
        onChange: this.handleChange,
        disableLabelChanges: true,
        accept: accept
      }), _react.default.createElement("div", {
        className: "bx--file-container"
      }, this.state.filenames.length === 0 ? null : this.state.filenames.map(function (name, index) {
        var _React$createElement;

        return _react.default.createElement("span", _extends({
          key: index,
          className: "bx--file__selected-file",
          ref: function ref(node) {
            return _this2.nodes[index] = node;
          } // eslint-disable-line

        }, rest), _react.default.createElement("p", {
          className: "bx--file-filename"
        }, name), _react.default.createElement("span", {
          className: "bx--file__state-container"
        }, _react.default.createElement(_carbonComponentsReact.Filename, (_React$createElement = {
          iconDescription: iconDescription,
          status: filenameStatus,
          onClick: function onClick(evt) {
            if (filenameStatus === 'edit') {
              _this2.handleClick(evt, index);
            }
          }
        }, _defineProperty(_React$createElement, "iconDescription", iconDescription), _defineProperty(_React$createElement, "onKeyDown", function onKeyDown(evt) {
          if (evt.which === 13 || evt.which === 32) {
            _this2.handleClick(evt, index);
          }
        }), _defineProperty(_React$createElement, "onClick", function onClick(evt) {
          if (filenameStatus === 'edit') {
            _this2.handleClick(evt, index);
          }
        }), _React$createElement))));
      })));
    }
  }]);

  return FileUploader;
}(_react.Component);

exports.default = FileUploader;

_defineProperty(FileUploader, "propTypes", {
  iconDescription: _propTypes.default.string,
  buttonLabel: _propTypes.default.string,
  buttonKind: _propTypes.default.oneOf(['primary', 'secondary']),
  filenameStatus: _propTypes.default.oneOf(['edit', 'complete', 'uploading']).isRequired,
  labelDescription: _propTypes.default.string,
  labelTitle: _propTypes.default.string,
  multiple: _propTypes.default.bool,
  onChange: _propTypes.default.func,
  onClick: _propTypes.default.func,
  className: _propTypes.default.string,
  accept: _propTypes.default.arrayOf(_propTypes.default.string),
  labelTooltip: _propTypes.default.object
});

_defineProperty(FileUploader, "defaultProps", {
  iconDescription: 'Provide icon description',
  filenameStatus: 'uploading',
  buttonLabel: '',
  buttonKind: 'primary',
  multiple: false,
  onChange: function onChange() {},
  onClick: function onClick() {},
  accept: [],
  labelTooltip: null
});