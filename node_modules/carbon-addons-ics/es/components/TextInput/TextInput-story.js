"use strict";

var _react = _interopRequireDefault(require("react"));

var _react2 = require("@storybook/react");

var _addonActions = require("@storybook/addon-actions");

var _addonInfo = require("@storybook/addon-info");

var _index = require("../../index");

var _storybookReadme = require("storybook-readme");

var _README = _interopRequireDefault(require("./README.md"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var TextInputProps = {
  className: 'some-class',
  id: 'test2',
  labelText: 'Text Input',
  onClick: (0, _addonActions.action)('onClick'),
  onChange: (0, _addonActions.action)('onChange')
};
var controlledValue = 'Controlled value';
(0, _react2.storiesOf)('Components|TextInput', module).addDecorator((0, _storybookReadme.withReadme)(_README.default)).add('enabled', (0, _addonInfo.withInfo)("\n      This example shows an enabled TextInput component. The default type is 'text' and its\n      value can be either 'string' or 'number'. Notice there is no placeholder prop. The label is designed\n      to be the placeholder.\n    ")(function () {
  return _react.default.createElement(_index.TextInput, TextInputProps);
})).add('disabled', (0, _addonInfo.withInfo)("\n      This example shows a disabled TextInput component.\n    ")(function () {
  return _react.default.createElement(_index.TextInput, _extends({
    disabled: true
  }, TextInputProps));
})).add('email', (0, _addonInfo.withInfo)("\n      This example shows an enabled TextInput component with type 'email'.\n    ")(function () {
  return _react.default.createElement(_index.TextInput, _extends({}, TextInputProps, {
    type: 'email'
  }));
})).add('password', (0, _addonInfo.withInfo)("\n      This example shows an enabled TextInput component with type 'password'.\n    ")(function () {
  return _react.default.createElement(_index.TextInput, _extends({}, TextInputProps, {
    type: 'password'
  }));
})).add('controlled', (0, _addonInfo.withInfo)("\n      This example shows a controlled TextInput component (i.e. with a value prop)\n    ")(function () {
  return _react.default.createElement(_index.TextInput, _extends({}, TextInputProps, {
    value: controlledValue
  }));
}));