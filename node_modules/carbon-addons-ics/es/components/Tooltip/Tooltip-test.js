"use strict";

var _react = _interopRequireDefault(require("react"));

var _Icon = _interopRequireDefault(require("../Icon"));

var _FloatingMenu = _interopRequireDefault(require("../../globals/internal/FloatingMenu"));

var _Tooltip = _interopRequireDefault(require("../Tooltip"));

var _enzyme = require("enzyme");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('Tooltip', function () {
  describe('Renders as expected with defaults', function () {
    var wrapper = (0, _enzyme.mount)(_react.default.createElement(_Tooltip.default, {
      triggerText: "Tooltip"
    }, _react.default.createElement("p", {
      className: "bx--tooltip__label"
    }, "Tooltip label"), _react.default.createElement("p", null, "Lorem ipsum dolor sit amet")));
    var trigger = wrapper.find('.bx--tooltip__trigger');
    describe('tooltip trigger', function () {
      it('renders a tooltip container', function () {
        expect(trigger.length).toEqual(1);
      });
      it('renders the info icon', function () {
        var icon = trigger.find(_Icon.default);
        expect(icon.length).toBe(1);
        expect(icon.props().name).toBe('info');
      });
    });
  });
  describe('Renders as expected with specified properties', function () {
    var wrapper = (0, _enzyme.mount)(_react.default.createElement(_Tooltip.default, {
      triggerText: "Tooltip",
      direction: "bottom",
      menuOffset: {
        left: 10,
        top: 15
      },
      showIcon: false
    }, ' ', _react.default.createElement("p", {
      className: "bx--tooltip__label"
    }, "Tooltip label"), _react.default.createElement("p", null, "Lorem ipsum dolor sit amet")));
    var trigger = wrapper.find('.bx--tooltip__trigger');
    var floatingMenu = wrapper.find(_FloatingMenu.default);
    describe('tooltip container', function () {
      it("sets the tooltip's position", function () {
        expect(floatingMenu.prop('menuDirection')).toEqual('bottom');
      });
      it("sets the tooltip's offset", function () {
        expect(floatingMenu.prop('menuOffset')).toEqual({
          left: 10,
          top: 15
        });
      });
      it('does not render info icon', function () {
        var icon = trigger.find(_Icon.default);
        expect(icon.exists()).toBe(false);
      });
    });
  });
  describe('events', function () {
    it('changes state on click', function () {
      var wrapper = (0, _enzyme.mount)(_react.default.createElement(_Tooltip.default, {
        showIcon: false,
        triggerText: "Tooltip"
      }));
      var trigger = wrapper.find('.bx--tooltip__trigger');
      jest.spyOn(wrapper.instance(), 'getTriggerPosition');
      trigger.simulate('focus');
      expect(wrapper.state().open).toEqual(true);
      expect(wrapper.instance().getTriggerPosition).toHaveBeenCalled();
    });
    it('focus/blur changes state with icon', function () {
      var wrapper = (0, _enzyme.mount)(_react.default.createElement(_Tooltip.default, {
        showIcon: true,
        triggerText: "Tooltip"
      }));
      var trigger = wrapper.find('.bx--tooltip__icon-container');
      trigger.simulate('focus');
      expect(wrapper.state().open).toEqual(true);
      trigger.simulate('blur');
      expect(wrapper.state().open).toEqual(false);
    });
    it('if given openOnHover prop, changes state on hover', function () {
      var wrapper = (0, _enzyme.mount)(_react.default.createElement(_Tooltip.default, {
        openOnHover: true,
        showIcon: true,
        triggerText: "Tooltip"
      }));
      var trigger = wrapper.find('.bx--tooltip__icon-container');
      trigger.simulate('mouseEnter');
      expect(wrapper.state().open).toEqual(true);
      trigger.simulate('mouseLeave');
      expect(wrapper.state().open).toEqual(false);
    });
    it('A different key press does not change state', function () {
      var wrapper = (0, _enzyme.mount)(_react.default.createElement(_Tooltip.default, {
        triggerText: "Tooltip"
      }));
      var trigger = wrapper.find('.bx--tooltip__icon-container');
      trigger.simulate('keyDown', {
        which: 'x'
      });
      expect(wrapper.state().open).toEqual(false);
    });
  });
  describe('getTriggerPosition', function () {
    var mockObject = {
      test: 'test'
    };
    it('sets triggerPosition when triggerEl is set', function () {
      var rootWrapper = (0, _enzyme.mount)(_react.default.createElement(_Tooltip.default, {
        triggerText: "Tooltip"
      }));
      rootWrapper.setState({
        triggerPosition: mockObject
      });
      rootWrapper.instance().getTriggerPosition();
      expect(rootWrapper.state().triggerPosition).not.toEqual(mockObject);
    });
    it('does not set triggerPosition when triggerEl is not set', function () {
      var rootWrapper = (0, _enzyme.mount)(_react.default.createElement(_Tooltip.default, {
        triggerText: "Tooltip"
      }));
      rootWrapper.setState({
        triggerPosition: mockObject
      });
      delete rootWrapper.instance().triggerEl;
      rootWrapper.instance().getTriggerPosition();
      expect(rootWrapper.state().triggerPosition).toEqual(mockObject);
    });
  });
});