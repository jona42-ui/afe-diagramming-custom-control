"use strict";

var _react = _interopRequireDefault(require("react"));

var _react2 = require("@storybook/react");

var _addonActions = require("@storybook/addon-actions");

var _addonInfo = require("@storybook/addon-info");

var _index = require("../../index");

var _storybookReadme = require("storybook-readme");

var _README = _interopRequireDefault(require("./README.md"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var numberInputProps = {
  className: 'some-class',
  id: 'some-id',
  label: 'Number Input label',
  onChange: (0, _addonActions.action)('onChange'),
  onClick: (0, _addonActions.action)('onClick'),
  min: -10,
  max: 100,
  step: 10,
  invalidText: 'Invalid number format'
};
var introText = "\n  Number inputs are similar to text fields, but contain controls used to increase or decrease an incremental value. The Number Input component can be passed a starting value, a min, a max, and the step.\n";
(0, _react2.storiesOf)('Components|NumberInput', module).addDecorator((0, _storybookReadme.withReadme)(_README.default)).add('enabled', (0, _addonInfo.withInfo)("\n        ".concat(introText, "\n        The example below shows an enabled Number Input component.\n      "))(function () {
  return _react.default.createElement("div", null, _react.default.createElement(_index.NumberInput, _extends({}, numberInputProps, {
    label: 'One Step Example',
    step: 1
  })), _react.default.createElement(_index.NumberInput, _extends({}, numberInputProps, {
    label: 'Ten Step Example',
    value: 42
  })));
})).add('disabled', (0, _addonInfo.withInfo)("\n        ".concat(introText, "\n        The example below shows an disabled Number Input component.\n      "))(function () {
  return _react.default.createElement(_index.NumberInput, _extends({}, numberInputProps, {
    disabled: true,
    value: null
  }));
})).add('invalid', (0, _addonInfo.withInfo)("\n        ".concat(introText, "\n        The example below shows an disabled Number Input component.\n      "))(function () {
  return _react.default.createElement(_index.NumberInput, _extends({}, numberInputProps, {
    invalid: true
  }));
}));