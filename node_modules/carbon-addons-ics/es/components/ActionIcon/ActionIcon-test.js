"use strict";

var _react = _interopRequireDefault(require("react"));

var _ActionIcon = _interopRequireDefault(require("../ActionIcon"));

var _enzyme = require("enzyme");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('ActionIcon', function () {
  describe('Renders common props as expected', function () {
    var wrapper = (0, _enzyme.shallow)(_react.default.createElement(_ActionIcon.default, {
      className: "extra-class",
      icon: "info",
      iconDescription: "information",
      tabIndex: -1
    }));
    var wrapperHref = (0, _enzyme.shallow)(_react.default.createElement(_ActionIcon.default, {
      className: "extra-class",
      icon: "info",
      iconDescription: "information",
      href: "/style",
      tabIndex: -1
    }));
    it('Renders an actionIcon', function () {
      expect(wrapper.length).toEqual(1);
      expect(wrapperHref.length).toEqual(1);
    });
    it('Renders with appropriate classname', function () {
      expect(wrapper.hasClass('bx--action-icon')).toEqual(true);
      expect(wrapperHref.hasClass('bx--action-icon')).toEqual(true);
    });
    it('Renders a child elements correctly', function () {
      expect(wrapper.find('button').length).toEqual(1);
      expect(wrapperHref.find('a').length).toEqual(1);
    });
    it('Renders a child with a classname', function () {
      expect(wrapper.find('button').hasClass('bx--action-icon_btn')).toEqual(true);
      expect(wrapperHref.find('a').hasClass('bx--action-icon_btn')).toEqual(true);
    });
    it('Renders with tab', function () {
      expect(wrapper.props().tabIndex).toEqual(-1);
      expect(wrapperHref.props().tabIndex).toEqual(-1);
    });
    it('Renders with extra class', function () {
      expect(wrapper.hasClass('extra-class')).toEqual(true);
      expect(wrapperHref.hasClass('extra-class')).toEqual(true);
    });
  });
  describe('Renders modifiers as expected', function () {
    var wrapper = (0, _enzyme.shallow)(_react.default.createElement(_ActionIcon.default, {
      small: true,
      selected: true,
      icon: "info",
      iconDescription: "information"
    }));
    var wrapperHref = (0, _enzyme.shallow)(_react.default.createElement(_ActionIcon.default, {
      href: "/style",
      icon: "info",
      iconDescription: "information",
      small: true,
      selected: true
    }));
    it('Renders small', function () {
      expect(wrapper.hasClass('bx--action-icon--sm')).toEqual(true);
      expect(wrapperHref.hasClass('bx--action-icon--sm')).toEqual(true);
    });
    it('Renders selected', function () {
      expect(wrapper.hasClass('bx--action-icon--selected')).toEqual(true);
      expect(wrapperHref.hasClass('bx--action-icon--selected')).toEqual(true);
    });
  });
  describe('Renders icons as expected', function () {
    var iconButton = (0, _enzyme.mount)(_react.default.createElement(_ActionIcon.default, {
      icon: "info",
      iconDescription: "information"
    }));
    var icon = iconButton.find('svg');
    it('Renders icon', function () {
      expect(icon.hasClass('bx--action-icon_img')).toBe(true);
    });
    it('Errors when no icon description', function () {
      var props = {
        icon: 'info'
      }; // eslint-disable-next-line quotes

      var error = new Error('icon property specified without also providing an iconDescription property.');
      expect(_ActionIcon.default.propTypes.iconDescription(props)).toEqual(error);
    });
  });
});