"use strict";

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _ModalWrapper = _interopRequireDefault(require("../ModalWrapper"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('ModalWrapper', function () {
  var mockProps = {};
  beforeEach(function () {
    mockProps = {
      id: 'modal',
      buttonTriggerText: 'Test Modal',
      modalHeading: 'Transactional Modal',
      primaryButtonText: 'Save',
      secondaryButtonText: 'Cancel',
      handleSubmit: jest.fn(function () {
        return true;
      }),
      shouldCloseAfterSubmit: true
    };
  });
  it('should render', function () {
    var wrapper = (0, _enzyme.mount)(_react.default.createElement(_ModalWrapper.default, mockProps, _react.default.createElement("p", {
      className: "bx--modal-content__text"
    }, "Text")));
    expect(wrapper).toMatchSnapshot();
  });
  it('should close after a successful submit action', function () {
    var wrapper = (0, _enzyme.mount)(_react.default.createElement(_ModalWrapper.default, mockProps, _react.default.createElement("p", {
      className: "bx--modal-content__text"
    }, "Text")));
    wrapper.find({
      children: mockProps.buttonTriggerText
    }).simulate('click');
    expect(wrapper.state('open')).toBe(true);
    wrapper.find({
      children: mockProps.primaryButtonText
    }).simulate('click');
    expect(wrapper.state('open')).toBe(false);
  });
  it('should not close after an unsuccessful submit action', function () {
    mockProps.handleSubmit = jest.fn(function () {
      return false;
    });
    var wrapper = (0, _enzyme.mount)(_react.default.createElement(_ModalWrapper.default, mockProps, _react.default.createElement("p", {
      className: "bx--modal-content__text"
    }, "Text")));
    wrapper.find({
      children: mockProps.buttonTriggerText
    }).simulate('click');
    expect(wrapper.state('open')).toBe(true);
    wrapper.find({
      children: mockProps.primaryButtonText
    }).simulate('click');
    expect(wrapper.state('open')).toBe(true);
  });
  it('should change state on escape action', function () {
    var wrapper = (0, _enzyme.mount)(_react.default.createElement(_ModalWrapper.default, mockProps, _react.default.createElement("p", {
      className: "bx--modal-content__text"
    }, "Text")));
    wrapper.setState({
      open: true
    });
    expect(wrapper.state('open')).toBe(true);
    wrapper.find({
      children: mockProps.buttonTriggerText
    }).simulate('keyDown', {
      key: 'Esc',
      keyCode: 27,
      which: 27
    });
    expect(wrapper.state('open')).toBe(false);
  });
});